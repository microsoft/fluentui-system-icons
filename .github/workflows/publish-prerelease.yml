name: Publish Prerelease NPM

on:
  workflow_dispatch:
    inputs:
      preid:
        description: 'Prerelease identifier (e.g., alpha, beta, rc)'
        required: false
        default: 'alpha'
        type: choice
        options:
          - alpha
          - beta
          - rc
      dry-run:
        description: 'Dry run (simulate release without actually publishing)'
        required: false
        default: false
        type: boolean

jobs:
  publish-prerelease:
    if: ${{ github.repository_owner == 'microsoft' }}
    name: Publish @fluentui/react-icons prerelease
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate branch
        run: |
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "❌ ERROR: Prerelease workflow cannot be run against the main branch" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Please run this workflow on a feature or release branch." >> $GITHUB_STEP_SUMMARY
            echo "For more information, see: https://github.com/microsoft/fluentui-system-icons/blob/main/packages/react-icons/docs/prerelease.md" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Build react-icons package
        run: |
          npx nx run react-icons:build

      #  NOTE:
      #   We need to calculate the next version before updating package.json manually. Otherwise the version bump would be the same version which would lead to workflow failure.
      #   This is needed because this repo doesn't set git tags per package so we are unable to leverage default Nx Release logic ( get latest version from git, falling back to package.json version)
      - name: Calculate next prerelease version
        id: next-version
        run: |
          NEXT_VERSION=$(node .github/scripts/get-next-prerelease-version.js --package "@fluentui/react-icons" --preid "${{ inputs.preid }}")
          echo "version=$NEXT_VERSION" >> $GITHUB_OUTPUT
          echo "📦 Next version will be: $NEXT_VERSION"

      - name: Update package.json version
        if: ${{ !inputs.dry-run }}
        run: |
          npx nx release version ${{ steps.next-version.outputs.version }} \
            --dry-run=${{ inputs.dry-run }} \
            --verbose

      - name: Publish to npm (Nx Release)
        run: |
          npx nx release publish \
            --tag prerelease \
            --dry-run=${{ inputs.dry-run }} \
            --verbose
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Summary
        run: |
          if [ "${{ inputs.dry-run }}" == "true" ]; then
            echo "### 🧪 Dry Run Complete" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Mode:** Simulation (no actual publish)" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ✅ Prerelease Published" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Package:** @fluentui/react-icons" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ steps.next-version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Tag:** prerelease" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ inputs.dry-run }}" == "false" ]; then
            echo "Install with:" >> $GITHUB_STEP_SUMMARY
            echo '```bash' >> $GITHUB_STEP_SUMMARY
            echo "npm install @fluentui/react-icons@${{ steps.next-version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi
